[gcode_macro M117]
rename_existing: M117.1
gcode:
  M117.1 {rawparams}
  {action_respond_info(rawparams)}
  
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

  
[gcode_macro CENTER]
description: move the toolhead to center
gcode:

  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

  {% set mid_x = max_x / 2.0 %}
  {% set mid_y = max_y / 2.0 %}
  {% set z50 = max_z * 0.5 %}

  STATUS_BUSY
  HOME_IF_NEEDED
  G0 X{mid_x} Y{mid_y} Z{z50} F10000
  STATUS_READY
  
[gcode_macro HOME_IF_NEEDED]
#
# HOME_IF_NEEDED
#
# Perform a homing action only if one of the axes isn't homed.
#
description: Conditional home (i.e., home only if not homed already)
gcode:

    {% set verbose = params.VERBOSE|default(False) %}

    {% if not (('xy' in printer.toolhead.homed_axes) or ('z' in printer.toolhead.homed_axes)) %}
        {% if verbose %}
            { action_respond_info("Homing!") }
        {% endif %}
        G28
    {% endif %}

[gcode_macro HEATSOAK2]
#
# HEATSOAK
#
# Use the bed to preheat the chamber; the nozzle is placed just above the 
# centre of the bed to act as a proxy for a chamber thermistor. 
#
# The bed heats and waits for DELAY minutes at the set temperature. After 
# DELAY, the extruder temperature is monitored and the heatsoak doesn't 
# complete until after the AMBIENT temperature is "reached" (i.e., when 
# the extruder reports it is at AMBIENT).
#
# If you have a chamber thermistor, you can monitor that in the 
# TEMPERATURE_WAIT instead.
#
# If you don't want to delay for a set amount of time and just want to wait
# until the AMBIENT temperature is reached, you can set DELAY to 0.
#
description: Preheat the chamber using the bed. BED=105 AMBIENT=40 DELAY=15 (minutes)
gcode:
     {% set BED = params.BED|default(105)|float %}
     {% set AMBIENT = params.AMBIENT|default(40)|float %}
     {% set DELAY = params.DELAY|default(15)|float %}
     {% set mid_x = printer.toolhead.axis_maximum.x|float / 2.0 %}
     {% set mid_y = printer.toolhead.axis_maximum.y|float / 2.0 %}
     STATUS_HEATING
     M117 Bed:{BED}C Amb:{AMBIENT}C
     M118 Preheating {BED}C for {DELAY} minutes
     SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
     SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}
     HOME_IF_NEEDED
     G0 X{mid_x} Y{mid_y} Z0.2 F2000
     TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}
     {% set D_block = DELAY|float / 10.0  %}
     {% for i in range(10) %}
      {% set D_time = (DELAY|float - D_block * i|float)  %}
      M117 Waiting {D_time} minutes...
      M118 Waiting {D_time} minutes...
      G4 P{D_block * 60.0 * 1000.0}
     {% endfor %}
     M117 Waiting for {AMBIENT}C
     M118 Waiting for {AMBIENT}C
     TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={AMBIENT}
     STATUS_READY
     M117 Heatsoak complete.
     M118 Heatsoak complete.
     UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=60

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}